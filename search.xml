<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>“向江村”也需“归鹿门”——谈谈B站更换启动图及其背后的“同质化”现象</title>
      <link href="/bilibili-assimilation/"/>
      <url>/bilibili-assimilation/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p style="text-indent:2em">近日，B站更换客户端启动图一事在网上引发了热议。如此看似不经意之举，之所以能引发“轩然大波”，原因在于其背后所传递的信号——B站正在向“同质化”发展。</p><a id="more"></a><p style="text-indent:2em">作为一个以二次元文化为核心的视频网站，多年以来B站以其独特的竞争优势吸引了大量用户。但随着互联网的发展，这类用户群体也逐渐趋于饱和。二次元的标签，使B站显得有些“小众化”，这反而成为了限制B站用户圈子扩张的一个因素。</p><p style="text-indent:2em">因此，为了扩大用户群体以及增加营业利润，B站有了减淡二次元色彩的需求。尤其是在B站上市之后，这种需求变得更加强烈。</p><p style="text-indent:2em">此次更换启动图之举，或许为官方寻求网站转型道路上的一次试探。面对众人的质疑，官方给出的答复是：“22、33目前正在进行形象升级，将于今年8月16日与大家见面。”但是，这一说法并不能让人完全信服。反观以往22、33的形象的改变，大多是在“悄无声息”中进行的。此举若确如官方所说，仅仅是一次形象升级，那么等到完成之后再公之于众岂不更好？这两个月的“空档期”，似乎并没有存在的理由。于是，这更像是官方为自己留的一条退路。两个月的时间的冲洗，足以让人忘记很多事，若是两个月之后，大众的反响依然强烈，那么官方可以从容地让两人回归；若是众人的声音逐渐消弭，那么官方也许就能有更进一步的动作：客户端、网页端的二次元元素将逐渐减少。</p><p style="text-indent:2em">但是，以如此方式增加用户量，就一定能提高收益吗？也许用户数量和利润之间有一定的联系，但是这样的联系绝非必然。</p><p style="text-indent:2em">B站之所以吸引人，其一在于富有生机的创作环境；其二在于良好的观影体验；其三在于独特的文化环境。</p><p style="text-indent:2em">目前B站，有着大量优质原创作品。较之其他视频平台，这不失为B站的一大优势。然而大量用户的涌入，虽然在一定程度上能增加投稿数量，但是其中混杂着的无意义、无营养的营销类视频却让人防不胜防。“知乎”就是一个鲜明的例子，大量用户的涌入，使原来具有专业性、科学性的回答被迫蜷缩在了舞台一隅的阴影里，而娱乐性、故事性的答案却成为了站在舞台中央的主角。我们不妨试想，若是一位up主呕心沥血的大作无人问津，而营销者的“无心插柳”却爆红网络，创作者的热情怎不受打击？这无疑是对创作环境的一大冲击。</p><p style="text-indent:2em">在另一个角度，无广告的观影体验是B站的一大亮点，因而广告收入与用户数量又成为了一对矛盾。不同于其他网站，无广告的设计，使B站的收入减少了不少。一方面，虽然广告收入的多少与用户数量成正相关，但是倘若B站像其他平台一样设置了广告，那岂不是失去了自身亮点，导致对用户的吸引力下降？如此一来，收益的增长岂不是难达预期？另一方面，由于B站的收入来源比较单一，主要集中在“大会员”和“会员购”。倘若不设置广告，用户数量的单纯增加，也不会对收益又显著贡献。如此看来，这二者之间似乎将成为一对矛盾。</p><p style="text-indent:2em">再者，新用户的消费欲望不强，也为利润的增加带来困难。正如上文所说，会在“大会员”和“会员购”两个方面进行消费的往往是对B站有着身后感情的老用户，而大量新用户对平台本身并无太多认同感，他们的兴趣往往仅停留在视频内容方面，因而消费欲望较低。哪里有他们想要的资源，他们就去那个平台。若是B站希望通过“内容付费”的模式来增加收益，且不说B站与UP主之间的版权问题，单是新用户的做法便和B站的欲求相违背——新用户们首先会想到的是前往其它平台观看，而不是充值“大会员”。另外，B站对某些电视连续剧类型的资源的缺乏，也会成为B站在与其他视频平台竞争之中的短板。新用户的黏度不足，与B站想要通过对内容收费从而盈利的需求，这或许又将成为另一对矛盾。</p><p style="text-indent:2em">最后，新用户的涌入势必会对B站的文化氛围造成影响。就拿“弹幕”来说，我们记得曾有这样一个时代：科普君、计数君的身影时常显现，各种弹幕大放异彩，交织着、旋转着绘制出一幅幅精美的画面。弹幕以其功能之巧，一度被某位up主开发为“躲闪弹幕”的小游戏；弹幕以其数量之多，一度成为了测试手机性能的“标准”。然而现在，若是提及高级弹幕，BAS弹幕，却鲜为人知，知道代码弹幕，逆向弹幕的人更是屈指可数。更让人痛心的是，种种低俗弹幕屡见不鲜，引战弹幕更是层出不穷，不禁让人惊呼：“B站变了！”</p><p style="text-indent:2em">是的，运动之绝对，决定了变化之永恒。一个“变”字背后，又饱含了多少辛酸与无奈？B站的变化或许只是一面透镜，而我们更应该看到的是透镜之后的广大世界里所存在的一种“同质化”的现象。</p><p style="text-indent:2em">同质化的现象并不少见。从小的尺度看，我们身边的许多乡镇，在城市化的过程之中就走向了同质化。为扩张用地，古建筑被无情拆除；为规范市容，小摊小贩被驱逐殆尽……到头来，所有的城市似乎都是同一副模样：灰黑的道路，沉寂的高楼，无言的路人，匆匆的车流……街道之上，我们何时才能再次听到那一声声富有生活气息的吆喝？每个乡镇自身文化与特色的流失，便是一种同质化的现象。</p><p style="text-indent:2em">从大的角度看，我们所处的这个宇宙也在走向同质化。如果把我们的宇宙视为有限的孤立系统，熵增定律便为我们指明了“热平衡”的结局。当各种形式的有效能量全部转为单一的热能，当所有物质温度达到均一，如此的结果就是“热寂”到来，宇宙失去了生机……</p><p style="text-indent:2em">所幸，在这“同质化”的激流之中，并不乏“溯流而上”者。我想起《三体》之中歌者的一段话：“低熵体的熵还在降低，有序度还在上升，像漆黑海面上升起的磷火，这就是意义……”。其实我们每个人，都在为了与众不同、出类拔萃而努力奋斗；我们的民族也在前行的道路上尽力保存着中华文化、中华精神的青春；我们的祖国在发展的过程中，也在保留着独特的中国智慧与中国特色；而我们的宇宙，也挥舞着电磁力与引力的臂膀，努力扭转着“热寂”的结局。是的，如何在“同质化”的进程中，保持我们自身的特色与活力，或许已经成为我们亟待思考的问题。</p><p style="text-indent:2em">对于B站，既要以开放包容的姿态面向大众，又要兼顾自身的文化与特色；既要顺应潮流“向江村”，也需独善其身“归鹿门”。如何在二者之间找到平衡，确为一个难题。</p><p style="text-indent:2em">当然，我们也仍然抱有这样的希望：22、33的暂时消失，也许并不能决定什么，其背后也可能有更加复杂的原因。2010年是两人的诞生之年，若是确如官方所说，在她们今年十周岁的生日之时，我们将与二人更好地相遇。</p><!-- markdownlint-disable MD041 MD002--></body></html>]]></content>
      
      
      <categories>
          
          <category> Jottings </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Comments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Hexo中代码块的两种写法”及“在代码块中使用反引号(代码块开始标记)的方法”</title>
      <link href="/hexo-code-block/"/>
      <url>/hexo-code-block/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>主要分享一下 Hexo 中代码块的高级用法……</p><p>例如：设置标题，源码url等……</p><p>顺便解决一下“怎样在代码块中写代码块”的问题</p><a id="more"></a><h2 id="方式一-使用“codeblock”代码块"><a href="#方式一-使用“codeblock”代码块" class="headerlink" title="方式一: 使用“codeblock”代码块"></a>方式一: 使用“codeblock”代码块</h2><p>格式:</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{<span class="comment">% codeblock [lang:language] [title] [url] [link text] %}</span></span><br><span class="line">code snippet</span><br><span class="line">{<span class="comment">% endcodeblock %}</span></span><br></pre></td></tr></tbody></table></figure><p>从左到右一一对应: 语言 标题 源码文件下载地址 下载地址的文字</p><p>示例：</p><figure class="highlight cpp"><figcaption><span>Cpp Hello World</span><a href="http://test1.com/helloworld.cpp" target="_blank" rel="noopener">Download</a></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream>;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cout</span> << <span class="string">"Hello World"</span> << <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>写法:</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{<span class="comment">% codeblock Cpp Hello World lang:cpp http://test1.com/helloworld.cpp Download %}</span></span><br><span class="line">#include<iostream>;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    cout << "Hello World" << endl;</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br><span class="line">{<span class="comment">% endcodeblock %}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="方式二-使用“反引号”代码块"><a href="#方式二-使用“反引号”代码块" class="headerlink" title="方式二: 使用“反引号”代码块"></a>方式二: 使用“反引号”代码块</h2><p>格式:</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">``` [language] [title] [url] [link text]</span><br><span class="line">code snippet</span><br><span class="line">```</span><br></pre></td></tr></tbody></table></figure><p>从左到右一一对应: 语言 标题 源码文件下载地址 下载地址的文字</p><p>示例:</p><figure class="highlight python"><figcaption><span>Test_2c</span><a href="http://test2.com" target="_blank" rel="noopener">link</a></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sys.stdout.write(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></tbody></table></figure><p>写法:</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```python Test_2c http://test2.com</span><br><span class="line">import sys</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    sys.stdout.write("Hello World")</span><br><span class="line">```</span><br></pre></td></tr></tbody></table></figure><h2 id="其他事项-如何在内联代码中包含反引号"><a href="#其他事项-如何在内联代码中包含反引号" class="headerlink" title="其他事项-如何在内联代码中包含反引号"></a>其他事项-如何在内联代码中包含反引号</h2><p>如果你想像本文一样，告诉别人 Markdown的语法，那么就需要“在代码块之中包含代码块开始标记（反引号）”，可能出现如下几种情况：</p><h3 id="内联代码中包含反引号和其他字符"><a href="#内联代码中包含反引号和其他字符" class="headerlink" title="内联代码中包含反引号和其他字符"></a>内联代码中包含反引号和其他字符</h3><p>例如，你想输入:</p><p><code>这段代码中包含`符号</code></p><p>那么你应该这么输入:</p><p>以两个反引号作开头</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``这段代码中包含`符号``</span><br></pre></td></tr></tbody></table></figure><h3 id="内联代码中仅仅包含反引号"><a href="#内联代码中仅仅包含反引号" class="headerlink" title="内联代码中仅仅包含反引号"></a>内联代码中仅仅包含反引号</h3><p>例子，如果你想输入:</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">`</span><br><span class="line">``</span><br><span class="line">```</span><br><span class="line">````</span><br></pre></td></tr></tbody></table></figure><p>那么你应该这么输入:</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">````````</span><br><span class="line">`</span><br><span class="line">``</span><br><span class="line">```</span><br><span class="line">````</span><br><span class="line">````````</span><br></pre></td></tr></tbody></table></figure><p>注意, 最外围反引号数量要比内部多。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>总之，反引号可以重复使用，你只需要注意：</strong> 在外部 <em>作为代码块开始标记</em> 的反引号数量 大于内部 <em>连续的反引号的个数</em></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>部分内容参考: <a href="https://blog.csdn.net/WPwalter/article/details/97549715" target="_blank" rel="noopener">https://blog.csdn.net/WPwalter/article/details/97549715</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wolfram Mathematica 12.x 注册码在线生成器</title>
      <link href="/MMA12-KeyGenerator/"/>
      <url>/MMA12-KeyGenerator/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p style="font-size:30px;color:orange"><strong>Wolfram Mathematica 12.x Key Generator Online</strong></p><p><strong>Supports Wolfram Mathematica 12.0 and 12.1</strong></p><p><strong>Update 1 (April 20, 2020)</strong></p><p>Input your MathID (xxxx-xxxxx-xxxxx) and press <strong>Generate</strong>.</p><p><input type="text" id="mathId" placeholder="xxxx-xxxxx-xxxxx"></p><p><button id="generate">Generate</button></p><p id="result">Activation Key: None<br>Password: None<br><br></p><script type="text/javascript">function f1(n, byte, c) {for (var bitIndex = 0; bitIndex <= 7; bitIndex++) {var bit = (byte >> bitIndex) & 1;if (bit + ((n - bit) & ~1) === n) {n = (n - bit) >> 1;} else {n = ((c - bit) ^ n) >> 1;}}return n;}function genPassword(str, hash) {for (var byteIndex = str.length - 1; byteIndex >= 0; byteIndex--) {hash = f1(hash, str.charCodeAt(byteIndex), 0x105C3);}var n1 = 0;while (f1(f1(hash, n1 & 0xFF, 0x105C3), n1 >> 8, 0x105C3) !== 0xA5B6) {if (++n1 >= 0xFFFF) {return "Error";}}n1 = Math.floor(((n1 + 0x72FA) & 0xFFFF) * 99999.0 / 0xFFFF);var n1str = ("0000" + n1.toString(10)).slice(-5);var temp = parseInt(n1str.slice(0, -3) + n1str.slice(-2) + n1str.slice(-3, -2), 10);temp = Math.ceil((temp / 99999.0) * 0xFFFF);temp = f1(f1(0, temp & 0xFF, 0x1064B), temp >> 8, 0x1064B);for (byteIndex = str.length - 1; byteIndex >= 0; byteIndex--) {temp = f1(temp, str.charCodeAt(byteIndex), 0x1064B);}var n2 = 0;while (f1(f1(temp, n2 & 0xFF, 0x1064B), n2 >> 8, 0x1064B) !== 0xA5B6) {if (++n2 >= 0xFFFF) {return "Error";}}n2 = Math.floor((n2 & 0xFFFF) * 99999.0 / 0xFFFF);var n2str = ("0000" + n2.toString(10)).slice(-5);return n2str.charAt(3) + n1str.charAt(3) + n1str.charAt(1) + n1str.charAt(0) + "-" +n2str.charAt(4) + n1str.charAt(2) + n2str.charAt(0) + "-" +n2str.charAt(2) + n1str.charAt(4) + n2str.charAt(1) + "::1";}function checkMathId(s) {if (s.length != 16)return false;for (let i = 0; i < s.length; i++) {if (i === 4 || i === 10) {if (s[i] !== "-")return false;} else {if ("0123456789".search(s[i]) < 0)return false;}}return true;}Array.prototype.getRandom = function() {return this[Math.floor(Math.random() * this.length)];}document.getElementById("generate").addEventListener("click", function() {var mathId = document.getElementById("mathId").value.trim();if (!checkMathId(mathId)) {document.getElementById("result").innerText = "Bad MathID!";} else {activationKey = "";for (let i = 0; i < 14; i++) {activationKey += Math.floor(Math.random() * 10);if (i === 3 || i === 7)activationKey += "-";}var magicNumbers = [10690, 12251, 17649, 24816, 33360, 35944, 36412, 42041, 42635, 44011, 53799, 56181, 58536, 59222, 61041];var password = genPassword(mathId + "$1&" + activationKey, magicNumbers.getRandom());document.getElementById("result").innerText ="Activation Key: " + activationKey + "\n" +"Password: " + password + "\n\n" +"Thanks for using!";}});</script><a id="more"></a><p>p.s. 如果直接写js, 在Hexo的页面中不能被正确地识别和执行。因此需要这么写，用“raw/endraw”包裹:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{% raw %}</span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>></span></span><br><span class="line">    xxxxxxxxx</span><br><span class="line"><span class="tag"></<span class="name">script</span>></span></span><br><span class="line"></span><br><span class="line">{% endraw %}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeyGen </tag>
            
            <tag> Wolfram Mathematica </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈流量追捧之下的“网红”之风</title>
      <link href="/NetRed/"/>
      <url>/NetRed/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p style="text-indent:2em">互联网时代，“成名”的门槛不断降低。一方面，这给了更多人去接触世界、开拓视野的机会；然而另一方面，在“网红”圈子里也出现的种种现象也越来越引发我们的担忧。</p><a id="more"></a><p style="text-indent:2em">近日，一位四年前因盗窃入狱的窃贼出狱时，竟引来三十多家网红公司竞相签约。仅仅因为多年前一席令人匪夷所思的话语，就差点成为了“网红”。这实在令人大跌眼镜，“感慨万千”。</p><p style="text-indent:2em">如此一位文盲、窃贼，劣迹斑斑，不费吹灰之力，就有一堆人，将巨额钱财捧到眼前；而一个普通人寒窗十载，认真工作几十年，都无法触及这个数字。为什么别人不努力就能比自己拼命换来的生活还要好？这不禁让有些人怀疑：若是这样就能得到“财富密码”，那么努力和劳动的意义何在？</p><p style="text-indent:2em">的确，当知识不被重视，当努力的意义被解体，当炒作意味着捷径，当吸引眼球就意味着金钱如雪花飞来之时......试问，还有谁愿意脚踏实地去努力工作？窃·格拉瓦，一个畅行于底层生活，小学毕业的人、因为几句话就红遍全网、赚了几百万、买了大房子、开上了豪车、不用再打工。这样消极的态度，扭曲的观念，若是被大肆宣传，成为了无数人前赴后继的诱饵，岂不污浊了清正之风？</p><p style="text-indent:2em">我们知道，网红需要流量，但不需要被歪曲的流量。周某因盗窃入狱，这样的违法行为，应该受到的是舆论的谴责和法律的惩罚。因此不论是大众的盲目追捧，和还是些公司的蓄意包装，这样的行为都是在挑战的是我们的道德底线，法律底线，挑战的是我们赖以前行的最基本的社会秩序。这类行为应该被叫停，这类网红应该被抵制。</p><p style="text-indent:2em">我们更清楚，大众需要网红，但是需要的是正能量有价值的“网红”。钟南山院士，在抗击疫情的鏖战之中，身先士卒，无私奉献，赢得了广大群众的尊敬；珠峰斗士夏伯渝老人，历尽艰险，百折不挠，终究攀上峰顶，他的光辉事迹广为传颂。相比较之下，这才是我们这个时代当之无愧的“网红”——能给我们启示、鼓舞，能给我们精神力量的正向价值。</p><p style="text-indent:2em">正如林清玄所言：“改变表象最好的方法，是从内在里改革”。我们也需要认识到，扭曲的网红风气只是“表象”，而其“内在”也许在于我们自身。撇开刻意的宣传，网红之所以能成为网红，其根本还在于大众的猎奇心理。如果人人都能自觉抵制不良文化，那么这样所谓的网红在互联网世界里根本不会有立足之地。</p><p style="text-indent:2em">将丑陋美化，将人性践踏，将底线抛开。当我们在“享受”这些网络扭曲的狂欢时，我们承受的是正在或即将由我们买单的恶果。如果有一天，我们习惯了这种是非曲直、天马行空，那时，我们也许就成为了罪恶的一份子。因此，我们也必须学会明辨是非，理性思考，在投入网络的大潮之前，客观地看待事物。</p><p style="text-indent:2em">当然，需要注意的是，网红现象的产生是时代的产物，我们也并不是说一个刑满释放的小偷没有资格和时代同行，但前提是他能够悬崖勒马，改过自新。我们不难想象，倘若群众的目光能从无意义的追捧之上转移到对正义的追求，对人性的思考之上，那么我们的社会将更加积极向上。</p><p style="text-indent:2em">“水止则能照，衡定则能称”。唯有在追捧的热浪之中，做到心如“水止”，思如“衡定”，保持沉着和理性，才能走得更长、更远。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Jottings </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Comments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS部署 &amp; Centos 常用指令</title>
      <link href="/vps-and-centos/"/>
      <url>/vps-and-centos/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>分享一些通常建站时需要做的事情、注意事项，以及常用的Centos命令</p><h2 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h2><ol><li>安全性设置<br>例如: 防火墙、SSH、SELinux</li><li>安装建站环境<br><em>可以用 宝塔面板 解决</em></li><li>建站具体配置</li><li>设置自动备份</li><li>其他一些自己想干的事情</li></ol><a id="more"></a><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="系统信息与状态"><a href="#系统信息与状态" class="headerlink" title="系统信息与状态"></a>系统信息与状态</h3><p>系统内存占用信息: <code>free</code></p><p>各种资源使用情况: <code>top</code></p><ul><li><code>-p [PID]</code> 用于指定进程</li><li>按下 <code>H</code> 可以查看线程</li></ul><p>查看进程: <code>ps -ef</code></p><ul><li>最占内存的前10个进程：<code>ps -auxf | sort -nr -k 4 | head -10</code></li><li>最占CPU的前10个进程：<code>ps -auxf | sort -nr -k 3 | head -10</code><br>查看打开的文件: <code>lsof</code></li><li>用作查看80端口占用: <code>lsof -i :80</code></li></ul><p>清除历史命令: <code>history -c</code></p><p>查看登录成功的记录: <code>last</code></p><p>查看登录失败的记录: <code>lastb</code></p><p>清除登陆系统成功的记录: <code>echo > /var/log/wtmp</code></p><p>清除登陆系统失败的记录: <code>echo > /var/log/btmp</code></p><p>查看系统信息:</p><ul><li><code>cat  /etc/redhat-release</code></li><li><code>uname -a</code><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3>查看服务状态: <code>systemctl status xxx.service(服务名)</code></li></ul><p>启动/停止/重启 服务: <code>systemctl start/stop/restart xxx.service(服务名)</code></p><p>设置/取消 开机自启: <code>systemctl enable/disable xxx.service(服务名)</code></p><h3 id="Cron-自动化"><a href="#Cron-自动化" class="headerlink" title="Cron 自动化"></a>Cron 自动化</h3><p>查看任务列表：<code>crontab -l</code></p><p>编辑任务列表：<code>crontab -e</code></p><h3 id="防火墙篇"><a href="#防火墙篇" class="headerlink" title="防火墙篇"></a>防火墙篇</h3><p>查看防火墙状态：<code>firewall-cmd --state</code>或者 <code>systemctl status firewalld</code></p><p>启动防火墙：<code>systemctl start firewalld.service</code></p><p>禁止开机自启：<code>systemctl disable firewalld.service</code></p><p>允许自启改用 <code>enable</code></p><p>查看已经开放的端口：<code>firewall-cmd --list-ports</code></p><p>开启端口：<code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code><br>批量版：<code>firewall-cmd --zone=public --add-port=7001-7005/tcp --permanent</code></p><p>命令含义：</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">–zone #作用域</span><br><span class="line">–add-port=80/tcp #添加端口，格式为：端口/通讯协议</span><br><span class="line">–permanent #永久生效，没有此参数重启后失效（注意最后修改玩重启下防火墙）</span><br></pre></td></tr></tbody></table></figure><p>修改完记得重启防火墙:<code>firewall-cmd --reload</code></p><p>另外注意 iptables 防火墙:<code>vim /etc/sysconfig/iptables</code></p><h3 id="修改SSH登录"><a href="#修改SSH登录" class="headerlink" title="修改SSH登录"></a>修改SSH登录</h3><h4 id="改ssh端口："><a href="#改ssh端口：" class="headerlink" title="改ssh端口："></a>改ssh端口：</h4><ol><li><p>确认防火墙已经放行</p></li><li><p><code>vim /etc/ssh/sshd_config</code></p></li><li><p>在#Port22下边新增</p><p>Port 25536（这个是你需要改的新端口）</p></li><li><p>注意检查 SELinux 规则是否放行新增的端口</p></li><li><p>尝试使用新端口登陆。成功后封闭22端口（编辑文件 && 重启服务）</p></li></ol><h4 id="开启Public-Key登录："><a href="#开启Public-Key登录：" class="headerlink" title="开启Public Key登录："></a>开启Public Key登录：</h4><ol><li><code>vim /etc/ssh/sshd_config</code><br>设置如下：<figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no #需要先有公钥私钥，否则登不上（先不修改以防万一）</span><br><span class="line">RSAAuthentication yes  #(可能没有)</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></tbody></table></figure></li><li>建立目录并设置权限 <code>mkdir -m 700 .ssh</code></li><li>上传.pub文件到<code>~/.ssh/</code> 并重命名为 <code>authorized_keys</code><br>或者编辑 <code>authorized_keys</code> 写入公钥</li><li>设置权限 <code>chmod 600 .ssh/authorized_keys</code></li></ol><h4 id="其他安全设置"><a href="#其他安全设置" class="headerlink" title="其他安全设置:"></a>其他安全设置:</h4><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LoginGraceTime 30</span><br><span class="line">PermitRootLogin no #禁止Root登陆，注意先添加用户以防万一。</span><br><span class="line">MaxAuthTries 3</span><br><span class="line">Protocol 2 #用ssh2更安全</span><br></pre></td></tr></tbody></table></figure><p><strong>一切操作后记得重启ssh服务</strong>：<code>systemctl restart sshd</code></p><h3 id="SELinux-相关"><a href="#SELinux-相关" class="headerlink" title="SELinux 相关:"></a>SELinux 相关:</h3><p>查看SELinux：<code>getenforce</code></p><p>临时关闭SElinux：<code>setenforce 0</code></p><p>永久关闭SELinux：</p><ol><li>编辑 <code>/etc/sysconfig/selinux</code></li><li>将其中<code>SELINUX=enforcing</code> 改为 <code>SELINUX=disabled</code></li></ol></body></html>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不想使用全局用户？教你为Hexo博客单独配置指定的git用户</title>
      <link href="/hexo-git-user/"/>
      <url>/hexo-git-user/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>众所周知，Hexo 博客在 deploy 时，默认使用的是 Git全局用户。近期因为个人需要，在一台PC上配置了多个 git账户（取消了全局用户设置），导致 执行 <code>hexo d</code> 时报错，提示需要配置用户名。</p><p>因此，我们需要  “为 Hexo 博客单独配置指定的 git 用户” 。不过网上的教程大部分都是设置全局用户的方法，在一番折腾之后，我终于找到了的解决方案，就此分享一下。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决方法其实很简单：</p><ol><li><p>首先，打开hexo博客所在的本地文件夹</p></li><li><p>打开此目录下 <code>.deploy_git/.git/</code>  文件夹（.git 为隐藏目录）。另外需要注意，打开的一定是在 “.deploy_key” 目录下的 “.git” 文件夹，外层的 “.git” 文件夹与此无关，即使修改也没有作用。</p></li><li><p>用文本编辑器编辑该目录下的 <code>config</code> 文件，新增如下配置：</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = YourUserName</span><br><span class="line">email = example@example.com</span><br></pre></td></tr></tbody></table></figure><p>注意使用你自己的用户名和邮箱替换对应值</p></li><li><p>保存配置文件并退出.</p></li></ol><p>大功告成</p><h2 id="期间踩坑"><a href="#期间踩坑" class="headerlink" title="期间踩坑"></a>期间踩坑</h2><ol><li><p>首先尝试了第一种方法，使用脚本解决，“在hexo deploy之前将全局user更改，deploy完成之后再将user改回。” 不过感觉不太完美</p></li><li><p>然后试了网上另一种方法，删除了 “.deploy_git” 目录，问题确实解决了，但是提交记录全没了（还好删之前有备份）</p></li><li><p>编辑 “config” 时，编辑成博客根目录下的 “.git/config” 导致修改不起效</p></li><li><p>修改了 博客根目录下 “_config.yml” 文件，在其中 <code>deploy</code>部分添加了如下配置：</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: YourUserName</span><br><span class="line">email: example@example.com</span><br></pre></td></tr></tbody></table></figure><p>然而，Windows平台下这样做并没有什么用…（据说 Linux平台可以使用此方法）</p></li></ol><p>p.s. 上述部分方法来自 Github 上 Hexo 项目的 <a href="https://github.com/hexojs/hexo/issues/2125" target="_blank" rel="noopener">issue #2125 能否hexo deploy 时指定git账户</a> </p></body></html>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“此电话号码无法用于进行验证”？解决Google 账户注册时中国手机号的验证问题</title>
      <link href="/google-register/"/>
      <url>/google-register/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><img src="https://res.cloudinary.com/hui-shao/image/upload/v1586395640/blog/google-sign/google-sign_ippjjh.jpg" alt></p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>当你辛辛苦苦地准备好“网络环境”，准备注册Google 账户时…..</p><p>却被突如其来的提示无情地打断： <strong>“此电话号码无法用于进行验证”</strong></p><p>（无话可说。。。）</p><p><img src="notallow.png" alt></p><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p><em>截至文章发布日期亲测有效…</em></p><p><em>梯子请自行解决…</em></p></blockquote><ol><li>准备浏览器：Google Chrome 或者 Microsoft Edge （新版）</li><li>在浏览器中打开设置 - 高级设置 - 语言，添加 “英语”</li><li>重新排序语言，把 “英语” 设置为首选（移到顶部）</li><li>在新标签页 打开 <a href="https://www.google.com/" target="_blank" rel="noopener">google.com</a>  (推荐使用 无痕窗口)，我们会发现网页语言变成了英文</li><li>按照正常步骤操作，此时 中国手机号码 也可以成功验证了！</li></ol><p><img src="success.png" alt></p><h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><p>注册成功后，为了<strong>减少账户被封禁的风险</strong>，建议：</p><ol><li>不要在多个设备频繁登录</li><li>登录时 ip 地址尽量减少变动（特别是国内公共梯子，ip都是共享的，很容易被google风控）</li><li>完善一些个人信息，比如上传头像，绑定手机等</li><li>多使用关联 google账户 的服务，比如 Gmail，Google play 等等。</li></ol><p>总之，<strong>不要</strong> 让自己的账户看起来像 <strong>“批量注册” 的 “机器人”</strong></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为Hexo博客仓库配置独立的Deploy Key（git）</title>
      <link href="/hexo-Deploy-Key-git/"/>
      <url>/hexo-Deploy-Key-git/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><img src="https://res.cloudinary.com/hui-shao/image/upload/v1584877174/blog/cover/cover_1200x500.jpg" alt></p><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><h3 id="关于-ssh-key-与-deploy-key"><a href="#关于-ssh-key-与-deploy-key" class="headerlink" title="关于 ssh-key 与 deploy-key"></a>关于 ssh-key 与 deploy-key</h3><p>ssh-key 是用于认证 Github 账户的密钥，对所有的 repository (下文简写为 repo ) 都有操作权限；而 deploy-key 只允许对特定 repo 进行操作，每个 repo 的 deploy key 都是独有的，其他 repo 无法使用相同的 key。</p><p>下面是 Github 官方的说明：</p><blockquote><p>Deploy key is a SSH key set in your repo to grant client read-only (as well as r/w, if you want) access to your repo.</p><p>As the name says, its primary function is to be used in the deploy process, where only read access is needed. Therefore keep the repo safe from the attack, in case the server side is fallen.</p></blockquote><p>出于安全考虑（<del>尝试新事物</del>），我决定为托管在 Github 上的这个博客配置单独的 deploy-key.</p><a id="more"></a><h2 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do?"></a>What to do?</h2><h3 id="创建-deploy-key"><a href="#创建-deploy-key" class="headerlink" title="创建 deploy key"></a>创建 deploy key</h3><p><em>p.s. 以下演示均在 Windows 平台完成；终端均为 “cmd”</em></p><p>打开终端，切换到你的账户的主文件夹：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d <span class="string">"%HOMEDRIVE%%HOMEPATH%"</span></span><br></pre></td></tr></tbody></table></figure><p>然后输入命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f <span class="string">".\.ssh\deploy_key_blog"</span> -C <span class="string">"用于区分key的注释"</span></span><br></pre></td></tr></tbody></table></figure><p><strong>其中 <code>deploy_key_blog</code> 是新密钥的名字，可以自己修改，不要和已有密钥重名。</strong></p><p>回车之后，一般会出现：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br></pre></td></tr></tbody></table></figure><p>这个是让你为私钥设置密码的，不需要的话什么都不用输，“连续按两次回车” 即可进入下一环节。</p><p>如果成功，你会看到类似这样的输出：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> .\.ssh\deploy_key_blog.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> .\.ssh\deploy_key_blog.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256: “这里是一大串字符”   example@example.com  <span class="comment"># 这里是你的邮箱</span></span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string"># 这中间是一张随机图像</span></span><br><span class="line"><span class="string"># 这中间是一张随机图像</span></span><br><span class="line"><span class="string"># 这中间是一张随机图像</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></tbody></table></figure><p>这样，一个 deoloy key 就创建完成了</p><h3 id="部署-deploy-key"><a href="#部署-deploy-key" class="headerlink" title="部署 deploy key"></a>部署 deploy key</h3><ol><li>在 Github 网页端登陆账号，然后打开 Hexo 博客所在的 repo 。</li><li>先点击横向菜单栏中的 <code>“Settings”</code> ，接下来在左侧纵向菜单栏点击 <code>“Deploy keys”</code> 。</li><li>点击 <code>Add deploy key</code> ，Title 可以随便起（用于自己区分）。</li><li>打开用户主文件夹中的 .ssh 文件夹（可能是隐藏文件），用文本编辑工具打开刚刚生成的 <code>“deploy_key_blog.pub”</code> 。（注意，是 .pub 后缀的文件）</li><li>复制文件中的所有内容（应以 ssh-rsa 开头），粘贴到网页中 Key 文本框中，然后勾选 <code>“Allow write access”</code>，点击 <code>“Add key”</code> 即可。</li></ol><h3 id="修改配置-config"><a href="#修改配置-config" class="headerlink" title="修改配置 config"></a>修改配置 config</h3><ol><li><p>打开用户主文件夹下的 “.ssh” 文件夹，右键 - “Git Bash Here” ，输入 <code>touch config</code> 然后回车。</p><p>也可以新建一个文本文档，然后重命名为 config （没有后缀名）</p></li><li><p>用文本编辑工具打开 config ，写入下列内容：</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 第一个账号(默认使用的账号)，一般不用更改</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"># 第二个新账号，其中"hexo"为前缀名，可以任意设置，要记住，后面需要用到</span><br><span class="line"># 最后一行的 deploy_key_blog 是你创建的新密钥的名称（根据实际情况替换）</span><br><span class="line">Host xxxxxx.github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/deploy_key_blog</span><br></pre></td></tr></tbody></table></figure></li><li><p>保存 / 另存为  ，编码选择 “UTF-8 ” 。</p></li><li><p>打开终端 输入下列指令（其中 “hexo” 是你刚刚设置的 Host）:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@hexo.github.com</span><br></pre></td></tr></tbody></table></figure><p>如果显示下列信息，表示配置成功：</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi 你的用户名/repo名! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="修改配置-config-yml"><a href="#修改配置-config-yml" class="headerlink" title="修改配置 _config.yml"></a>修改配置 _config.yml</h3><ol><li><p>用文本编辑器打开 博客本地 repo 中根目录下的 _config.yml ，修改 deploy 部分如下（其中 ”hexo.github.com“ 是你刚刚设置的 Host）：</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@hexo.github.com:你的用户名/你的用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure></li><li><p>打开终端，切换工作路径为 “博客本地 repo 的根目录“ ，输入 <code>hexo g && hexo d</code> 即可提交。</p></li></ol><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>参考资料：</p><ol><li><a href="https://www.itrhx.com/2019/01/18/A16-deploy-two-or-more-hexo-blogs/" target="_blank" rel="noopener">一台电脑使用两个/多个GitHub账号部署两个/多个Hexo博客 </a> 作者：<a href="https://github.com/TRHX" target="_blank" rel="noopener">TRHX</a></li></ol><p>在此表示感谢！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
