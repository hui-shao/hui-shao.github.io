<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>谈谈流量追捧之下的“网红”之风</title>
      <link href="/2020/04/28/NetRed/"/>
      <url>/2020/04/28/NetRed/</url>
      
        <content type="html"><![CDATA[<p style="text-indent:2em">互联网时代，“成名”的门槛不断降低。一方面，这给了更多人去接触世界、开拓视野的机会；然而另一方面，在“网红”圈子里也出现的种种现象也越来越引发我们的担忧。</p><p style="text-indent:2em">近日，一位四年前因盗窃入狱的窃贼出狱时，竟引来三十多家网红公司竞相签约。仅仅因为多年前一席令人匪夷所思的话语，就差点成为了“网红”。这实在令人大跌眼镜，“感慨万千”：</p><p style="text-indent:2em">如此一位文盲、窃贼，劣迹斑斑，不费吹灰之力，就有一堆人，将巨额钱财捧到眼前；而一个普通人寒窗十载，认真工作几十年，都无法触及这个数字。为什么别人不努力就能比自己拼命换来的生活还要好？这不禁让有些人怀疑，若是这样就能得到“财富密码”，那么努力和劳动的意义何在？</p><p style="text-indent:2em">的确，当知识不被重视，当努力的意义被解体，当炒作意味着捷径，当吸引眼球就意味着金钱如雪花飞来之时......试问，还有谁愿意脚踏实地去努力工作？窃·格拉瓦，一个畅行于底层生活，小学毕业的人、因为几句话就红遍全网、赚了几百万、买了大房子、开上了豪车、不用再打工。这样消极的态度，扭曲的观念，若是被大肆宣传，成为了无数人前赴后继的诱饵，岂不污浊了清正之风？</p><p style="text-indent:2em">我们知道，网红需要流量，但不需要被歪曲的流量。周某因盗窃入狱，这样的违法行为，应该受到的是舆论的谴责和法律的惩罚。因此不论是大众的盲目追捧，和还是些公司的蓄意包装，这样的行为都是在挑战的是我们的道德底线，法律底线，挑战的是我们赖以前行的最基本的社会秩序。这类行为应该被叫停，这类网红应该被抵制。</p><p style="text-indent:2em">我们知道，网红需要流量，但需要的是积极向上的流量。钟南山院士，在抗击疫情的鏖战之中，身先士卒，无私奉献，赢得了广大群众的尊敬；珠峰斗士夏伯渝老人，历尽艰险，百折不挠，终究攀上峰顶，他的光辉事迹广为传颂。相比于娱乐新闻，我们更需要的，就是这样的正能量，这样能给我们启示、鼓舞，能给我们精神力量的正能量。</p><p style="text-indent:2em">正如林清玄所言：“改变表象最好的方法，是从内在里改革”。我们也需要认识到，扭曲的网红风气只是“表象”，而其“内在”也许在于我们自身。撇开刻意的宣传，网红之所以能成为网红，其根本还在于大众的猎奇心理。如果人人都能自觉抵制不良文化，那么这样所谓的网红在互联网世界里根本不会有立足之地。</p><p style="text-indent:2em">将丑陋美化，将人性践踏，将底线抛开。当我们在“享受”这些网络扭曲的狂欢时，我们承受的是正在或即将由我们买单的恶果。如果有一天，我们习惯了这种是非曲直、天马行空，那时，我们也许就成为了罪恶的一份子。因此，我们也必须学会明辨是非，理性思考，在投入网友的大潮之前，客观地看待事物。当然，需要注意的是，作为一种时代的产物，网红自身没有过错。我们也并不是说一个刑满释放的小偷没有资格和时代同行，但前提是他能够悬崖勒马，改过自新。我们不难想象，倘若群众的目光能从无意义的追捧之上转移到对正义的追求，对人性的思考之上，那么我们的社会将更加积极向上。</p><p style="text-indent:2em">“水止则能照，衡定则能称”。唯有在追捧的热浪之中，做到心如“水止”，保持沉着和理性，才能走得更长、更远。</p>]]></content>
      
      
      <categories>
          
          <category> Jottings </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Comments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS部署 &amp; Centos 常用指令</title>
      <link href="/2020/04/14/vps-and-centos/"/>
      <url>/2020/04/14/vps-and-centos/</url>
      
        <content type="html"><![CDATA[<h2 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h2><ol><li>安全性设置<br>例如: 防火墙、SSH、SELinux</li><li>安装建站环境<br><em>可以用 宝塔面板 解决</em></li><li>建站具体配置</li><li>设置自动备份</li><li>其他一些自己想干的事情</li></ol><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="系统信息与状态"><a href="#系统信息与状态" class="headerlink" title="系统信息与状态"></a>系统信息与状态</h3><p>系统内存占用信息: <code>free</code></p><p>各种资源使用情况: <code>top</code></p><ul><li><code>-p [PID]</code> 用于指定进程</li><li>按下 <code>H</code> 可以查看线程</li></ul><p>查看进程: <code>ps -ef</code></p><ul><li>最占内存的前10个进程：<code>ps -auxf | sort -nr -k 4 | head -10</code></li><li>最占CPU的前10个进程：<code>ps -auxf | sort -nr -k 3 | head -10</code><br>查看打开的文件: <code>lsof</code></li><li>用作查看80端口占用: <code>lsof -i :80</code></li></ul><p>清除历史命令: <code>history -c</code></p><p>查看登录成功的记录: <code>last</code></p><p>查看登录失败的记录: <code>lastb</code></p><p>清除登陆系统成功的记录: <code>echo &gt; /var/log/wtmp</code></p><p>清除登陆系统失败的记录: <code>echo &gt; /var/log/btmp</code></p><p>查看系统信息:</p><ul><li><code>cat  /etc/redhat-release</code></li><li><code>uname -a</code><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3>查看服务状态: <code>systemctl status xxx.service(服务名)</code></li></ul><p>启动/停止/重启 服务: <code>systemctl start/stop/restart xxx.service(服务名)</code></p><p>设置/取消 开机自启: <code>systemctl enable/disable xxx.service(服务名)</code></p><h3 id="Cron-自动化"><a href="#Cron-自动化" class="headerlink" title="Cron 自动化"></a>Cron 自动化</h3><p>查看任务列表：<code>crontab -l</code></p><p>编辑任务列表：<code>crontab -e</code></p><h3 id="防火墙篇"><a href="#防火墙篇" class="headerlink" title="防火墙篇"></a>防火墙篇</h3><p>查看防火墙状态：<code>firewall-cmd --state</code>或者 <code>systemctl status firewalld</code></p><p>启动防火墙：<code>systemctl start firewalld.service</code></p><p>禁止开机自启：<code>systemctl disable firewalld.service</code></p><p>允许自启改用 <code>enable</code></p><p>查看已经开放的端口：<code>firewall-cmd --list-ports</code></p><p>开启端口：<code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code><br>批量版：<code>firewall-cmd --zone=public --add-port=7001-7005/tcp --permanent</code></p><p>命令含义：</p><pre><code class="tex">–zone #作用域–add-port=80/tcp #添加端口，格式为：端口/通讯协议–permanent #永久生效，没有此参数重启后失效（注意最后修改玩重启下防火墙）</code></pre><p>修改完记得重启防火墙:<code>firewall-cmd --reload</code></p><p>另外注意 iptables 防火墙:<code>vim /etc/sysconfig/iptables</code></p><h3 id="修改SSH登录"><a href="#修改SSH登录" class="headerlink" title="修改SSH登录"></a>修改SSH登录</h3><h4 id="改ssh端口："><a href="#改ssh端口：" class="headerlink" title="改ssh端口："></a>改ssh端口：</h4><ol><li><p>确认防火墙已经放行</p></li><li><p><code>vim /etc/ssh/sshd_config</code></p></li><li><p>在#Port22下边新增</p><p>Port 25536（这个是你需要改的新端口）</p></li><li><p>注意检查 SELinux 规则是否放行新增的端口</p></li><li><p>尝试使用新端口登陆。成功后封闭22端口（编辑文件 &amp;&amp; 重启服务）</p></li></ol><h4 id="开启Public-Key登录："><a href="#开启Public-Key登录：" class="headerlink" title="开启Public Key登录："></a>开启Public Key登录：</h4><ol><li><code>vim /etc/ssh/sshd_config</code><br>设置如下：<pre><code class="tex">PasswordAuthentication no #需要先有公钥私钥，否则登不上（先不修改以防万一）RSAAuthentication yes  #(可能没有)PubkeyAuthentication yes</code></pre></li><li>建立目录并设置权限 <code>mkdir -m 700 .ssh</code></li><li>上传.pub文件到<code>~/.ssh/</code> 并重命名为 <code>authorized_keys</code><br>或者编辑 <code>authorized_keys</code> 写入公钥</li><li>设置权限 <code>chmod 600 .ssh/authorized_keys</code></li></ol><h4 id="其他安全设置"><a href="#其他安全设置" class="headerlink" title="其他安全设置:"></a>其他安全设置:</h4><pre><code class="tex">LoginGraceTime 30PermitRootLogin no #禁止Root登陆，注意先添加用户以防万一。MaxAuthTries 3Protocol 2 #用ssh2更安全</code></pre><p><strong>一切操作后记得重启ssh服务</strong>：<code>systemctl restart sshd</code></p><h3 id="SELinux-相关"><a href="#SELinux-相关" class="headerlink" title="SELinux 相关:"></a>SELinux 相关:</h3><p>查看SELinux：<code>getenforce</code></p><p>临时关闭SElinux：<code>setenforce 0</code></p><p>永久关闭SELinux：</p><ol><li>编辑 <code>/etc/sysconfig/selinux</code></li><li>将其中<code>SELINUX=enforcing</code> 改为 <code>SELINUX=disabled</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不想使用全局用户？教你为Hexo博客单独配置指定的git用户</title>
      <link href="/2020/04/09/hexo-git-user/"/>
      <url>/2020/04/09/hexo-git-user/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>众所周知，Hexo 博客在 deploy 时，默认使用的是 Git全局用户。近期因为个人需要，在一台PC上配置了多个 git账户（取消了全局用户设置），导致 执行 <code>hexo d</code> 时报错，提示需要配置用户名。</p><p>因此，我们需要  “为 Hexo 博客单独配置指定的 git 用户” 。不过网上的教程大部分都是设置全局用户的方法，在一番折腾之后，我终于找到了的解决方案，就此分享一下。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决方法其实很简单：</p><ol><li><p>首先，打开hexo博客所在的本地文件夹</p></li><li><p>打开此目录下 <code>.deploy_git/.git/</code>  文件夹（.git 为隐藏目录）。另外需要注意，打开的一定是在 “.deploy_key” 目录下的 “.git” 文件夹，外层的 “.git” 文件夹与此无关，即使修改也没有作用。</p></li><li><p>用文本编辑器编辑该目录下的 <code>config</code> 文件，新增如下配置：</p><pre><code class="tex">[user]    name = YourUserName    email = example@example.com</code></pre><p>注意使用你自己的用户名和邮箱替换对应值</p></li><li><p>保存配置文件并退出.</p></li></ol><p>大功告成</p><h2 id="期间踩坑"><a href="#期间踩坑" class="headerlink" title="期间踩坑"></a>期间踩坑</h2><ol><li><p>首先尝试了第一种方法，使用脚本解决，“在hexo deploy之前将全局user更改，deploy完成之后再将user改回。” 不过感觉不太完美</p></li><li><p>然后试了网上另一种方法，删除了 “.deploy_git” 目录，问题确实解决了，但是提交记录全没了（还好删之前有备份）</p></li><li><p>编辑 “config” 时，编辑成博客根目录下的 “.git/config” 导致修改不起效</p></li><li><p>修改了 博客根目录下 “_config.yml” 文件，在其中 <code>deploy</code>部分添加了如下配置：</p><pre><code class="tex">name: YourUserNameemail: example@example.com</code></pre><p>然而，Windows平台下这样做并没有什么用…（据说 Linux平台可以使用此方法）</p></li></ol><p>p.s. 上述部分方法来自 Github 上 Hexo 项目的 <a href="https://github.com/hexojs/hexo/issues/2125" target="_blank" rel="noopener">issue #2125 能否hexo deploy 时指定git账户</a> </p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“此电话号码无法用于进行验证”？解决Google 账户注册时中国手机号的验证问题</title>
      <link href="/2020/04/09/google-register/"/>
      <url>/2020/04/09/google-register/</url>
      
        <content type="html"><![CDATA[<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>当你辛辛苦苦地准备好“网络环境”，准备注册Google 账户时…..</p><p>却被突如其来的提示无情地打断： <strong>“此电话号码无法用于进行验证”</strong></p><p>（无话可说。。。）</p><p><img src="notallow.png" alt=""></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p><em>截至文章发布日期亲测有效…</em></p><p><em>梯子请自行解决…</em></p></blockquote><ol><li>准备浏览器：Google Chrome 或者 Microsoft Edge （新版）</li><li>在浏览器中打开设置 - 高级设置 - 语言，添加 “英语”</li><li>重新排序语言，把 “英语” 设置为首选（移到顶部）</li><li>在新标签页 打开 <a href="https://www.google.com/" target="_blank" rel="noopener">google.com</a>  (推荐使用 无痕窗口)，我们会发现网页语言变成了英文</li><li>按照正常步骤操作，此时 中国手机号码 也可以成功验证了！</li></ol><p><img src="success.png" alt=""></p><h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><p>注册成功后，为了<strong>减少账户被封禁的风险</strong>，建议：</p><ol><li>不要在多个设备频繁登录</li><li>登录时 ip 地址尽量减少变动（特别是国内公共梯子，ip都是共享的，很容易被google风控）</li><li>完善一些个人信息，比如上传头像，绑定手机等</li><li>多使用关联 google账户 的服务，比如 Gmail，Google play 等等。</li></ol><p>总之，<strong>不要</strong> 让自己的账户看起来像 <strong>“批量注册” 的 “机器人”</strong></p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为Hexo博客仓库配置独立的Deploy Key（git）</title>
      <link href="/2020/03/23/Hexo-Deploy-Key-git/"/>
      <url>/2020/03/23/Hexo-Deploy-Key-git/</url>
      
        <content type="html"><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><h3 id="关于-ssh-key-与-deploy-key"><a href="#关于-ssh-key-与-deploy-key" class="headerlink" title="关于 ssh-key 与 deploy-key"></a>关于 ssh-key 与 deploy-key</h3><p>ssh-key 是用于认证 Github 账户的密钥，对所有的 repository (下文简写为 repo ) 都有操作权限；而 deploy-key 只允许对特定 repo 进行操作，每个 repo 的 deploy key 都是独有的，其他 repo 无法使用相同的 key。</p><p>下面是 Github 官方的说明：</p><blockquote><p>Deploy key is a SSH key set in your repo to grant client read-only (as well as r/w, if you want) access to your repo.</p><p>As the name says, its primary function is to be used in the deploy process, where only read access is needed. Therefore keep the repo safe from the attack, in case the server side is fallen.</p></blockquote><p>出于安全考虑（<del>尝试新事物</del>），我决定为托管在 Github 上的这个博客配置单独的 deploy-key.</p><h2 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do?"></a>What to do?</h2><h3 id="创建-deploy-key"><a href="#创建-deploy-key" class="headerlink" title="创建 deploy key"></a>创建 deploy key</h3><p><em>p.s. 以下演示均在 Windows 平台完成；终端均为 “cmd”</em></p><p>打开终端，切换到你的账户的主文件夹：</p><pre><code class="bash">cd /d &quot;%HOMEDRIVE%%HOMEPATH%&quot;</code></pre><p>然后输入命令：</p><pre><code class="bash">ssh-keygen -t rsa -f &quot;.\.ssh\deploy_key_blog&quot; -C &quot;用于区分key的注释&quot;</code></pre><p><strong>其中 <code>deploy_key_blog</code> 是新密钥的名字，可以自己修改，不要和已有密钥重名。</strong></p><p>回车之后，一般会出现：</p><pre><code class="bash">Generating public/private rsa key pair.Enter passphrase (empty for no passphrase):</code></pre><p>这个是让你为私钥设置密码的，不需要的话什么都不用输，“连续按两次回车” 即可进入下一环节。</p><p>如果成功，你会看到类似这样的输出：</p><pre><code class="bash">Your identification has been saved in .\.ssh\deploy_key_blog.Your public key has been saved in .\.ssh\deploy_key_blog.pub.The key fingerprint is:SHA256: “这里是一大串字符”   example@example.com  # 这里是你的邮箱The key&#39;s randomart image is:+---[RSA 2048]----+# 这中间是一张随机图像# 这中间是一张随机图像# 这中间是一张随机图像+----[SHA256]-----+</code></pre><p>这样，一个 deoloy key 就创建完成了</p><h3 id="部署-deploy-key"><a href="#部署-deploy-key" class="headerlink" title="部署 deploy key"></a>部署 deploy key</h3><ol><li>在 Github 网页端登陆账号，然后打开 Hexo 博客所在的 repo 。</li><li>先点击横向菜单栏中的 <code>“Settings”</code> ，接下来在左侧纵向菜单栏点击 <code>“Deploy keys”</code> 。</li><li>点击 <code>Add deploy key</code> ，Title 可以随便起（用于自己区分）。</li><li>打开用户主文件夹中的 .ssh 文件夹（可能是隐藏文件），用文本编辑工具打开刚刚生成的 <code>“deploy_key_blog.pub”</code> 。（注意，是 .pub 后缀的文件）</li><li>复制文件中的所有内容（应以 ssh-rsa 开头），粘贴到网页中 Key 文本框中，然后勾选 <code>“Allow write access”</code>，点击 <code>“Add key”</code> 即可。</li></ol><h3 id="修改配置-config"><a href="#修改配置-config" class="headerlink" title="修改配置 config"></a>修改配置 config</h3><ol><li><p>打开用户主文件夹下的 “.ssh” 文件夹，右键 - “Git Bash Here” ，输入 <code>touch config</code> 然后回车。</p><p>也可以新建一个文本文档，然后重命名为 config （没有后缀名）</p></li><li><p>用文本编辑工具打开 config ，写入下列内容：</p><pre><code class="tex"># 第一个账号(默认使用的账号)，一般不用更改Host github.com    HostName github.com    User git    IdentityFile ~/.ssh/id_rsa# 第二个新账号，其中&quot;hexo&quot;为前缀名，可以任意设置，要记住，后面需要用到# 最后一行的 deploy_key_blog 是你创建的新密钥的名称（根据实际情况替换）Host xxxxxx.github.com    HostName github.com    User git    IdentityFile ~/.ssh/deploy_key_blog</code></pre></li><li><p>保存 / 另存为  ，编码选择 “UTF-8 ” 。</p></li><li><p>打开终端 输入下列指令（其中 “hexo” 是你刚刚设置的 Host）:</p><pre><code class="bash">ssh -T git@hexo.github.com</code></pre><p>如果显示下列信息，表示配置成功：</p><pre><code class="tex">Hi 你的用户名/repo名! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre></li></ol><h3 id="修改配置-config-yml"><a href="#修改配置-config-yml" class="headerlink" title="修改配置 _config.yml"></a>修改配置 _config.yml</h3><ol><li><p>用文本编辑器打开 博客本地 repo 中根目录下的 _config.yml ，修改 deploy 部分如下（其中 ”hexo.github.com“ 是你刚刚设置的 Host）：</p><pre><code class="tex">deploy:  type: git  repository: git@hexo.github.com:你的用户名/你的用户名.github.io.git  branch: master</code></pre></li><li><p>打开终端，切换工作路径为 “博客本地 repo 的根目录“ ，输入 <code>hexo g &amp;&amp; hexo d</code> 即可提交。</p></li></ol><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>参考资料：</p><ol><li><a href="https://www.itrhx.com/2019/01/18/A16-deploy-two-or-more-hexo-blogs/" target="_blank" rel="noopener">一台电脑使用两个/多个GitHub账号部署两个/多个Hexo博客 </a> 作者：<a href="https://github.com/TRHX" target="_blank" rel="noopener">TRHX</a></li></ol><p>在此表示感谢！</p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/20/hello-world/"/>
      <url>/2020/03/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
